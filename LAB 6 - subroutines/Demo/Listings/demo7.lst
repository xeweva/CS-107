


ARM Macro Assembler    Page 1 


    1 00000000                 GLOBAL           __main
    2 00000000                 AREA             main, CODE, READONLY
    3 00000000                 EXPORT           __main
    4 00000000                 EXPORT           __use_two_region_memory
    5 00000000 00000000 
                       __use_two_region_memory
                               EQU              0
    6 00000000                 EXPORT           SystemInit
    7 00000000                 ENTRY
    8 00000000         
    9 00000000         
   10 00000000         ; System Init routine
   11 00000000         SystemInit
   12 00000000         ;
   13 00000000         ; Clear data memory...
   14 00000000 4828            LDR              R0, =data_mem
   15 00000002 F04F 31FF       MOV              R1, #0xffffffff
   16 00000006 F04F 0240       MOV              R2, #64     ; 256 / 4 = 64
   17 0000000A         clr_loop
   18 0000000A F840 1B04       STR              R1, [R0], #4
   19 0000000E 3A01            SUBS             R2, #1
   20 00000010 D1FB            BNE              clr_loop
   21 00000012         FillStack
   22 00000012 4825            LDR              R0, =str_2_copy
   23 00000014 F100 0008       ADD              R0, #0x8
   24 00000018 F04F 31FE       MOV              R1, #0xfefefefe
   25 0000001C F44F 7280       LDR              R2, =0x100
   26 00000020         Fill_loop
   27 00000020 F840 1B04       STR              R1, [R0], #4
   28 00000024 3A01            SUBS             R2, #1
   29 00000026 D1FB            BNE              Fill_loop
   30 00000028 4770            BX               LR
   31 0000002A         ;
   32 0000002A         ; Main program
   33 0000002A         ;
   34 0000002A         __main
   35 0000002A         ;
   36 0000002A F04F 3011       MOV              R0, #0x11111111 
                                                            ; First parameter
   37 0000002E B401            PUSH             {R0}
   38 00000030 F04F 3022       MOV              R0, #0x22222222 
                                                            ; Second parameter 
                                                            
   39 00000034 B401            PUSH             {R0}
   40 00000036 F04F 3033       MOV              R0, #0x33333333 
                                                            ; Third parameter
   41 0000003A B401            PUSH             {R0}
   42 0000003C F04F 0000       MOV              R0, #0
   43 00000040 F04F 0303       MOV              R3, #3
   44 00000044 F04F 0404       MOV              R4, #4
   45 00000048 F04F 0505       MOV              R5, #5
   46 0000004C F000 F816       BL               sub_stack
   47 00000050 B003            ADD              SP, #12     ; Clear stack
   48 00000052         
   49 00000052 F04F 3055       MOV              R0, #0x55555555 
                                                            ; First parameter
   50 00000056 B401            PUSH             {R0}
   51 00000058 F04F 3044       MOV              R0, #0x44444444 
                                                            ; Second parameter 



ARM Macro Assembler    Page 2 


                                                            
   52 0000005C B401            PUSH             {R0}
   53 0000005E F04F 3044       MOV              R0, #0x44444444 
                                                            ; Third parameter
   54 00000062 B401            PUSH             {R0}
   55 00000064 F04F 0002       MOV              R0, #2
   56 00000068 F04F 0301       MOV              R3, #1
   57 0000006C F04F 0400       MOV              R4, #0
   58 00000070 F04F 0501       MOV              R5, #1
   59 00000074 F000 F802       BL               sub_stack
   60 00000078 B003            ADD              SP, #12     ; Clear stack
   61 0000007A         
   62 0000007A         stop
   63 0000007A E7FE            B                stop
   64 0000007C                 ALIGN
   65 0000007C         
   66 0000007C         sub_stack
   67 0000007C         ; func sub_stack(long p1, long p2, long p3)
   68 0000007C         ; {
   69 0000007C         ;   var long a, b, c
   70 0000007C         ;
   71 0000007C         ;   a = p1 + p2 + p3
   72 0000007C         ;
   73 0000007C         ;   . . .
   74 0000007C         ;
   75 0000007C         ;   r0 = b
   76 0000007C         ;   return r0
   77 0000007C         ; }
   78 0000007C         ;
   79 0000007C         ; r0 - result
   80 0000007C         ; r3, r4, r5 - temporary variables
   81 0000007C         ;
   82 0000007C B538            PUSH             {R3-R5, LR} ; save temp. var. r
                                                            egisters.
   83 0000007E B083            SUB              SP, #12     ; Allocate a, b, c
   84 00000080 9B09            LDR              R3, [SP, #36] ; First parameter
                                                            
   85 00000082 9C08            LDR              R4, [SP, #32] 
                                                            ; Second parameter
   86 00000084 9D07            LDR              R5, [SP, #28] ; Third parameter
                                                            
   87 00000086 4423            ADD              R3, R3, R4  ; r0 = p1 + p2
   88 00000088 442B            ADD              R3, R5      ; r0 = r0 + p3
   89 0000008A 9302            STR              R3, [SP, #8] 
                                                            ; a = p1 + p2 + p3 
                                                            
   90 0000008C         ;
   91 0000008C         ; . . .
   92 0000008C         ;
   93 0000008C 9801            LDR              R0, [SP, #4] ; r0 = b 
   94 0000008E B003            ADD              SP, #12     ; Destroy a, b, c
   95 00000090 BD38            POP              {R3-R5, PC} ; restore temp. reg
                                                            isters
   96 00000092         ; and return
   97 00000092         
   98 00000092 00 00           ALIGN
   99 00000094         
  100 00000094         str_1
  101 00000094 48 45 4C 



ARM Macro Assembler    Page 3 


              4C 4F 00         DCB              "HELLO", 0
  102 0000009A         str_2
  103 0000009A 43 53 20 
              31 30 37 
              00               DCB              "CS 107", 0
  104 000000A1 00 00 00        ALIGN
  105 000000A4         
  106 000000A4 00000000 
              00000000         AREA             variables, DATA, ALIGN=2
  107 00000000         data_mem
  108 00000000         str_1_copy
  109 00000000 00 00 00 
              00 00 00 
              00 00            SPACE            8
  110 00000008         str_2_copy
  111 00000008 00 00 00 
              00 00 00 
              00 00            SPACE            8
  112 00000010         
  113 00000010         
  114 00000010                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\demo7.d -o.\objects\demo7.o -I.\RTE\_Target_1 -IC:\Ke
il_v5\ARM\PACK\Keil\LPC4000_DFP\2.1.0\Device\Include -IC:\Keil_v5\ARM\CMSIS\Inc
lude --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSION SETA 525" --pre
define="CORE_M4 SETA 1" --list=.\listings\demo7.lst demo7.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

FillStack 00000012

Symbol: FillStack
   Definitions
      At line 21 in file demo7.s
   Uses
      None
Comment: FillStack unused
Fill_loop 00000020

Symbol: Fill_loop
   Definitions
      At line 26 in file demo7.s
   Uses
      At line 29 in file demo7.s
Comment: Fill_loop used once
SystemInit 00000000

Symbol: SystemInit
   Definitions
      At line 11 in file demo7.s
   Uses
      At line 6 in file demo7.s
Comment: SystemInit used once
__main 0000002A

Symbol: __main
   Definitions
      At line 34 in file demo7.s
   Uses
      At line 1 in file demo7.s
      At line 3 in file demo7.s

clr_loop 0000000A

Symbol: clr_loop
   Definitions
      At line 17 in file demo7.s
   Uses
      At line 20 in file demo7.s
Comment: clr_loop used once
main 00000000

Symbol: main
   Definitions
      At line 2 in file demo7.s
   Uses
      None
Comment: main unused
stop 0000007A

Symbol: stop
   Definitions
      At line 62 in file demo7.s
   Uses
      At line 63 in file demo7.s
Comment: stop used once
str_1 00000094




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: str_1
   Definitions
      At line 100 in file demo7.s
   Uses
      None
Comment: str_1 unused
str_2 0000009A

Symbol: str_2
   Definitions
      At line 102 in file demo7.s
   Uses
      None
Comment: str_2 unused
sub_stack 0000007C

Symbol: sub_stack
   Definitions
      At line 66 in file demo7.s
   Uses
      At line 46 in file demo7.s
      At line 59 in file demo7.s

10 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

data_mem 00000000

Symbol: data_mem
   Definitions
      At line 107 in file demo7.s
   Uses
      At line 14 in file demo7.s
Comment: data_mem used once
str_1_copy 00000000

Symbol: str_1_copy
   Definitions
      At line 108 in file demo7.s
   Uses
      None
Comment: str_1_copy unused
str_2_copy 00000008

Symbol: str_2_copy
   Definitions
      At line 110 in file demo7.s
   Uses
      At line 22 in file demo7.s
Comment: str_2_copy used once
variables 00000000

Symbol: variables
   Definitions
      At line 106 in file demo7.s
   Uses
      None
Comment: variables unused
4 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

__use_two_region_memory 00000000

Symbol: __use_two_region_memory
   Definitions
      At line 5 in file demo7.s
   Uses
      At line 4 in file demo7.s
Comment: __use_two_region_memory used once
1 symbol
351 symbols in table
