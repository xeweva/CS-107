


ARM Macro Assembler    Page 1 


    1 00000000         ;*******************************************************
                       ************************
    2 00000000         ;
    3 00000000         ;    CS 107: Computer Architecture and Organization -- L
                       AB 3
    4 00000000         ;    Filename: Lab03.s
    5 00000000         ;    Date: [YOUR DATE]
    6 00000000         ;    Author: [YOUR NAME]
    7 00000000         ;
    8 00000000         ;*******************************************************
                       ************************
    9 00000000         ;
   10 00000000                 GLOBAL           __main
   11 00000000                 AREA             main, CODE, READONLY
   12 00000000                 EXPORT           __main
   13 00000000                 EXPORT           __use_two_region_memory
   14 00000000 00000000 
                       __use_two_region_memory
                               EQU              0
   15 00000000                 EXPORT           SystemInit
   16 00000000                 ENTRY
   17 00000000         
   18 00000000         
   19 00000000         ; System Init routine
   20 00000000         SystemInit
   21 00000000         ;
   22 00000000 4770            BX               LR
   23 00000002         ;
   24 00000002         ; Main program
   25 00000002         ;
   26 00000002         __main
   27 00000002         
   28 00000002         ;
   29 00000002         ; 1. Code the following IF-THEN statement:
   30 00000002         ;
   31 00000002         ;    if (r2 != r7)
   32 00000002         ;       r2 = r2 - r7;
   33 00000002         ;    else
   34 00000002         ;     r2 = r2 + r4;
   35 00000002         ;
   36 00000002         ;    Your code have to work with any numbers in R2, R7 a
                       nd R4
   37 00000002         ;    (5, 25(0x19))
   38 00000002         ;
   39 00000002 F240 020A       MOVW             R2, #10
   40 00000006 F240 0705       MOVW             R7, #5
   41 0000000A F240 040F       MOVW             R4, #15
   42 0000000E         ;
   43 0000000E         ; MOVW R2, #10
   44 0000000E         ; MOVW R7, #10
   45 0000000E         ; MOVW R4, #15
   46 0000000E         ;
   47 0000000E         ;-- Your instructions here ---
   48 0000000E         ;-- Approx. 3 instructions ---
   49 0000000E 42BA            CMP              R2, R7
   50 00000010 BF14 4422       ADDNE            R2, R4
   51 00000014 1BD2            SUBEQ            R2, R7
   52 00000016         
   53 00000016         



ARM Macro Assembler    Page 2 


   54 00000016         ;
   55 00000016         ; 2. Write a program that converts a hexadecimal value b
                       etween 0x0 and 0xf in register
   56 00000016         ;    R0 into its ASCII representation. Store ASCII repre
                       sentation into R1.
   57 00000016         ;
   58 00000016         ;    Digits '0' through '9' are represented with the ASC
                       II codes 0x30 to 0x39. The digits 
   59 00000016         ;    'A' through 'F' are coded as 0x41 through 0x46. (Se
                       e 'ascii.pdf' file)
   60 00000016         ;
   61 00000016         ;    Test your code with R0 = 15, 0 and 9
   62 00000016         ;    (0x46, 0x30, 0x39)
   63 00000016         ;
   64 00000016 F04F 000F       MOV              R0, #15
   65 0000001A         ; MOV  R0, #0
   66 0000001A         ; MOV  R0, #9
   67 0000001A         
   68 0000001A         ; if(r0 < 10)
   69 0000001A         ;  r1 = #0x30
   70 0000001A         ; else
   71 0000001A         ;  r1 = #0x37;
   72 0000001A         ;
   73 0000001A         ; add r1, r0
   74 0000001A         ; 
   75 0000001A         ;-- Your instructions here ---
   76 0000001A 280A            CMP              R0, #10
   77 0000001C BFC8 2137       MOVGT            R1, #0x37   ; set up bias FOR 1
                                                            0 AND MORE
   78 00000020 BFB8 2130       MOVLT            R1, #0x30   ;set up bias FOR 9 
                                                            AND LESS
   79 00000024 4401            ADD              R1, R0      ; add value
   80 00000026         ;
   81 00000026         ;
   82 00000026         ; 3. Modify the code you did for task #2 to check for va
                       lid number (0..15) in R0. 
   83 00000026         ;    Store '*' (0x2a) into R1 if R0 is out of valid rang
                       e. Store ASCII representation
   84 00000026         ;    for valid numbers (from 0 to 15 inclusive).
   85 00000026         ;
   86 00000026         ;    Test your code with R0 = 255, 15, 0, 9, 12 and 16
   87 00000026         ;    (0x2a, 0x46, 0x30, 0x39, 0x43, 0x2a)
   88 00000026         ;
   89 00000026         ; MOV  R0, #255
   90 00000026         ; MOV  R0, #15
   91 00000026         ; MOV  R0, #0
   92 00000026 F04F 0009       MOV              R0, #9
   93 0000002A         ; MOV  R0, #12
   94 0000002A         ; MOV  R0, #16
   95 0000002A         
   96 0000002A         ;-- Your instructions here ---
   97 0000002A 2810            CMP              R0, #16     ; >15 filter
   98 0000002C DC07            BGT              out_of_range
   99 0000002E         
  100 0000002E 2800            CMP              R0, #0      ; negative filter
  101 00000030 DB05            BLT              out_of_range
  102 00000032         
  103 00000032 280A            CMP              R0, #10
  104 00000034 BFC8 2137       MOVGT            R1, #0x37   ; set up bias FOR 1



ARM Macro Assembler    Page 3 


                                                            0 AND MORE
  105 00000038 BFB8 2130       MOVLT            R1, #0x30   ;set up bias FOR 9 
                                                            AND LESS
  106 0000003C 4401            ADD              R1, R0      ; add value
  107 0000003E         
  108 0000003E         out_of_range
  109 0000003E F04F 012A       MOV              R1, #0x2a
  110 00000042         
  111 00000042         
  112 00000042         ;
  113 00000042         ; 4. Write a program that counts number of binary '1's a
                       nd number of binary '0's in R0.
  114 00000042         ;    Save number of '1's into R1, number of '0's in R2. 
                       You may use any other register(s) and
  115 00000042         ;    do not need to preserve the value of R0 register.
  116 00000042         ;
  117 00000042         ;    Your code have to work with any number in R0
  118 00000042         ;
  119 00000042         ;    Debug your program with tets values R0 = 0xAAAAAAAA
                        and R0 = 0x55555555. Both should give 
  120 00000042         ;    you 16 1's and 16 0's
  121 00000042         ;
  122 00000042         ;    Then run your progarm with R0 = 0x708. Is your resu
                       lt correct? (use online converter to check)
  123 00000042         
  124 00000042         ; MOV  R0, #0xAAAAAAAA
  125 00000042         ; MOV  R0, #0x55555555
  126 00000042 F240 7008       MOVW             R0, #0x708
  127 00000046         
  128 00000046         ;-- Your instructions here ---
  129 00000046 F04F 0301       MOV              R3, #1
  130 0000004A F04F 0100       MOV              R1, #0
  131 0000004E F04F 0200       MOV              R2, #0
  132 00000052 F04F 0400       MOV              R4, #0
  133 00000056         
  134 00000056         bin_cnt_loop
  135 00000056         
  136 00000056 EA00 0403       AND              R4, R0, R3
  137 0000005A 2C00            CMP              R4, #0
  138 0000005C D102            BNE              it_was_1
  139 0000005E F102 0201       ADD              R2, #1      ; add zero cnt
  140 00000062 E001            B                loop_if_quit
  141 00000064         
  142 00000064         it_was_1
  143 00000064 F101 0101       ADD              R1, #1      ;add 1 count
  144 00000068         
  145 00000068         loop_if_quit
  146 00000068 005B            LSLS             R3, #1
  147 0000006A         
  148 0000006A D3F4            BCC              bin_cnt_loop
  149 0000006C         
  150 0000006C         
  151 0000006C         ;
  152 0000006C         ; 5. Write a "shift, test and restore" division algorith
                       m (See "Binary Division.pdf" for details).
  153 0000006C         ;
  154 0000006C         ;    For i = 1 to 32 do { we're using 32-bit representat
                       ions }
  155 0000006C         ;    { 



ARM Macro Assembler    Page 4 


  156 0000006C         ;     Left Shift the RQ pair
  157 0000006C         ;       Subtract the Divisor from R
  158 0000006C         ;       If R is positive then
  159 0000006C         ;          Set the low order (right most) bit in Q to 1
  160 0000006C         ;       Else
  161 0000006C         ;          Restore R by Adding back the Divisor
  162 0000006C         ;    }
  163 0000006C         ;
  164 0000006C         ;    R0 = remainder         (R)
  165 0000006C         ;    R1 = divident/quotient (Q)
  166 0000006C         ;    R2 = divisor           (D)
  167 0000006C         ;
  168 0000006C         ;    R1,R0 = R1/R2
  169 0000006C         ;
  170 0000006C         ;    Do not use UDIV and SDIV ARM commands!
  171 0000006C         ;
  172 0000006C         ;    Your code have to work with any valid numbers in R0
                       . You may use any other register(s). Check your 
  173 0000006C         ;    code with given values first. Then  try some anothe
                       r numbers in R1 and R2.
  174 0000006C         
  175 0000006C F04F 0000       MOV              R0, 0
  176 00000070 F240 31E8       MOVW             R1, #1000   ; 163/10 = 16, 3
  177 00000074 F240 021D       MOVW             R2, #29
  178 00000078 F04F 0300       MOV              R3, #0
  179 0000007C F04F 0400       MOV              R4, #0      ; COUNTER
  180 00000080         
  181 00000080         
  182 00000080         ;-- Your instructions here ---
  183 00000080         
  184 00000080         division_loop
  185 00000080         
  186 00000080         ;DOUBLE SHIFT
  187 00000080 0049            LSLS             R1, #1      ; Q<<1 + SET CARRY 
                                                            BIT
  188 00000082 EA4F 0040       LSL              R0, #1      ; R<<1
  189 00000086 BF28 3001       ADDCS            R0, #1      ; ADD CARRY BIT
  190 0000008A         
  191 0000008A         
  192 0000008A 4290            CMP              R0, R2      ;R >= B
  193 0000008C BFA4 F041 
              0101             ORRGE            R1, #1      ;SET LSB
  194 00000092 1A80            SUBGE            R0, R2      ;R = R - B
  195 00000094         
  196 00000094         
  197 00000094         ;LOOP CMDS
  198 00000094 F104 0401       ADD              R4, #1      ;i++
  199 00000098 2C20            CMP              R4, #32     ; loop exit
  200 0000009A DBF1            BLT              division_loop
  201 0000009C         
  202 0000009C         ;
  203 0000009C         ; 6. Write a small program to compare two 64-bit values.
                        Set R0 to 0 if two values 
  204 0000009C         ;    are equal, set R0 to 1 if two values are not equal.
                        First 64-bit number placed into 
  205 0000009C         ;    R1(HI bits) and R2(LO bits), second number is in R3
                       (HI bits) and R4(LO bits). Use only
  206 0000009C         ;    4 ARM instructions!
  207 0000009C         ;



ARM Macro Assembler    Page 5 


  208 0000009C         ;    Your code have to work with any numbers in R1-R4
  209 0000009C         ; 
  210 0000009C         ;    Check your code with all test sets below
  211 0000009C         ;
  212 0000009C F04F 31AA       MOV              R1, #0xAAAAAAAA
  213 000000A0 F04F 3255       MOV              R2, #0x55555555
  214 000000A4         ; MOV  R3, #0xAAAAAAAA
  215 000000A4         ; MOV  R4, #0x55555555
  216 000000A4         ; ---- 
  217 000000A4         ; MOV  R3, #0x55555555
  218 000000A4         ; MOV  R4, #0xAAAAAAAA
  219 000000A4         ; ---- 
  220 000000A4 F04F 33AA       MOV              R3, #0xAAAAAAAA
  221 000000A8 F04F 34AA       MOV              R4, #0xAAAAAAAA
  222 000000AC         ; ---- 
  223 000000AC         ; MOV  R3, #0x55555555
  224 000000AC         ; MOV  R4, #0x55555555
  225 000000AC         
  226 000000AC         ;-- Your 4 instructions here ---
  227 000000AC F04F 0001       MOV              R0, #1
  228 000000B0 4299            CMP              R1, R3
  229 000000B2 BF04 42A2       CMPEQ            R2, R4
  230 000000B6 2000            MOVEQ            R0, #0
  231 000000B8         
  232 000000B8         
  233 000000B8         
  234 000000B8         ;
  235 000000B8         ; 7. (Bonus). Write a code that allows you to rotate 64-
                       bit values in registers 
  236 000000B8         ;    R0 and R1. The code should shift value left...
  237 000000B8         ;
  238 000000B8         ;    +--------------------+   +--------------------+
  239 000000B8         ; +<-!         R0         !<--!         R1         !<--+
                       
  240 000000B8         ; !  +--------------------+   +--------------------+   !
                       
  241 000000B8         ; !                                                    !
                       
  242 000000B8         ; +-->---------------------->------------------------->+
                       
  243 000000B8         ;
  244 000000B8         ;    ...then right by one bit.
  245 000000B8         ;
  246 000000B8         ;    +--------------------+   +--------------------+
  247 000000B8         ; +->!         R0         !-->!         R1         !-->+
                       
  248 000000B8         ; !  +--------------------+   +--------------------+   !
                       
  249 000000B8         ; !                                                    !
                       
  250 000000B8         ; +<------------------------<-----------------------<--+
                       
  251 000000B8         ;
  252 000000B8         ;    - Do not use any other registers.
  253 000000B8         ;
  254 000000B8         ;    - Make sure that after two shifts the final value i
                       s equal to original one.
  255 000000B8         ;
  256 000000B8         ;    Tip: Left shift is tricky. You may remember: a << 1



ARM Macro Assembler    Page 6 


                        = a * 2; a * 2 = ???
  257 000000B8         ;    ... and take care of LSB...
  258 000000B8         ; 
  259 000000B8         ;    Check your code with all 3 test sets below:
  260 000000B8         ;
  261 000000B8 F240 0001       MOVW             R0, #0x0001
  262 000000BC F2C8 0000       MOVT             R0, #0x8000
  263 000000C0 F240 0101       MOVW             R1, #0x0001
  264 000000C4 F2C8 0100       MOVT             R1, #0x8000
  265 000000C8         ; ---- 
  266 000000C8         ; MOVW R0, #0xAAAA
  267 000000C8         ; MOVT R0, #0x8555
  268 000000C8         ; MOVW R1, #0x0F0F
  269 000000C8         ; MOVT R1, #0xF0F0
  270 000000C8         ; ---- 
  271 000000C8         ; MOV  R0, #0x00000001
  272 000000C8         ; MOV  R1, #0x00000001
  273 000000C8         ;
  274 000000C8         ; -- left --
  275 000000C8         ;--     Your instructions here    ---
  276 000000C8         ;-- May be done in 3 instructions ---
  277 000000C8         
  278 000000C8         ; -- right --
  279 000000C8         ;--     Your instructions here    ---
  280 000000C8         ;-- May be done in 3 instructions ---
  281 000000C8         
  282 000000C8         
  283 000000C8         ; 8. (Bonus++). Write a program that check if the binary
                        pattern 2_11001010 are presented at least once 
  284 000000C8         ;    somewhere in the number R0. The program should set 
                       R1 to 1 if the pattern is found, and clear R1 to 0 
  285 000000C8         ;    if no pattern in the R0. 
  286 000000C8         ; 
  287 000000C8         ;    Your code have to work with any number in R0
  288 000000C8         ;
  289 000000C8         ;    Your code have to preserve (do not change) the valu
                       e in R0
  290 000000C8         ;
  291 000000C8         ;    You may use any other registers
  292 000000C8         ;
  293 000000C8         ;    Examples: the number 2_1100110110010010111100101010
                       1100 (0xCD92F2AC) has the pattern inside
  294 000000C8         ;                                             --------
  295 000000C8         ;                         2_1100110011001100110011011001
                       0100 (0xCCCCCD94) has the pattern inside
  296 000000C8         ;                                                  -----
                       ---
  297 000000C8         ;                         2_1101101010110111001110011101
                       0101 (0xDAB739D5) - no pattern
  298 000000C8         ;
  299 000000C8 F24F 20AC       MOVW             R0, #0xF2AC
  300 000000CC F6CC 5092       MOVT             R0, #0xCD92
  301 000000D0         ;---
  302 000000D0         ; MOVW R0, #0xCD94
  303 000000D0         ; MOVT R0, #0xCCCC
  304 000000D0         ;---
  305 000000D0         ; MOVW R0, #0x39D5
  306 000000D0         ; MOVT R0, #0xDAB7
  307 000000D0         



ARM Macro Assembler    Page 7 


  308 000000D0         ;-- Your instructions here ---
  309 000000D0         
  310 000000D0         
  311 000000D0         stop
  312 000000D0 E7FE            B                stop
  313 000000D2         
  314 000000D2                 END
Command Line: --debug --xref --diag_suppress=9931 --cpu=Cortex-M4.fp --apcs=int
erwork --depend=.\objects\mdokukin_lab03.d -o.\objects\mdokukin_lab03.o -I.\RTE
\_Target_1 -IC:\Keil_v5\ARM\PACK\Keil\LPC4000_DFP\2.1.0\Device\Include -IC:\Kei
l_v5\ARM\CMSIS\Include --predefine="__EVAL SETA 1" --predefine="__UVISION_VERSI
ON SETA 525" --predefine="CORE_M4 SETA 1" --list=.\listings\mdokukin_lab03.lst 
MDokukin_Lab03.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

SystemInit 00000000

Symbol: SystemInit
   Definitions
      At line 20 in file MDokukin_Lab03.s
   Uses
      At line 15 in file MDokukin_Lab03.s
Comment: SystemInit used once
__main 00000002

Symbol: __main
   Definitions
      At line 26 in file MDokukin_Lab03.s
   Uses
      At line 10 in file MDokukin_Lab03.s
      At line 12 in file MDokukin_Lab03.s

bin_cnt_loop 00000056

Symbol: bin_cnt_loop
   Definitions
      At line 134 in file MDokukin_Lab03.s
   Uses
      At line 148 in file MDokukin_Lab03.s
Comment: bin_cnt_loop used once
division_loop 00000080

Symbol: division_loop
   Definitions
      At line 184 in file MDokukin_Lab03.s
   Uses
      At line 200 in file MDokukin_Lab03.s
Comment: division_loop used once
it_was_1 00000064

Symbol: it_was_1
   Definitions
      At line 142 in file MDokukin_Lab03.s
   Uses
      At line 138 in file MDokukin_Lab03.s
Comment: it_was_1 used once
loop_if_quit 00000068

Symbol: loop_if_quit
   Definitions
      At line 145 in file MDokukin_Lab03.s
   Uses
      At line 140 in file MDokukin_Lab03.s
Comment: loop_if_quit used once
main 00000000

Symbol: main
   Definitions
      At line 11 in file MDokukin_Lab03.s
   Uses
      None
Comment: main unused
out_of_range 0000003E




ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

Symbol: out_of_range
   Definitions
      At line 108 in file MDokukin_Lab03.s
   Uses
      At line 98 in file MDokukin_Lab03.s
      At line 101 in file MDokukin_Lab03.s

stop 000000D0

Symbol: stop
   Definitions
      At line 311 in file MDokukin_Lab03.s
   Uses
      At line 312 in file MDokukin_Lab03.s
Comment: stop used once
9 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

__use_two_region_memory 00000000

Symbol: __use_two_region_memory
   Definitions
      At line 14 in file MDokukin_Lab03.s
   Uses
      At line 13 in file MDokukin_Lab03.s
Comment: __use_two_region_memory used once
1 symbol
344 symbols in table
